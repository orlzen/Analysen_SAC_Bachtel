---
title: "SAC Bachtel"
subtitle: "Auswertung der Anmeldungen & Ausschreibungen"
author: "Lorenz Biberstein"
institute: "Tourenchef Sommer & Schneeschuhe"
date: "`r Sys.time()`"
date-format: medium
title-block-banner: "grey"
format: 
  html:
    embed-resources: true
always_allow_html: true
toc: true
toc-depth: 5
toc-title: "Inhalt"
toc-location: left
number-sections: true
number-depth: 3
lang: "de-DE"
css: styles.css
---

```{r global setup}
#| include = FALSE

# global options für alle Abbildungen: 50% Breite und Ausrichtung zentriert
knitr::opts_chunk$set(
  # out.width = "75%",
  fig.align = "center",
  fig.topcaption = TRUE,
  echo = FALSE,
  message = FALSE,
  warning = FALSE
)
```

```{r packages}
library(readxl) # Import von Excel
library(dplyr) # Für spätere Analysen
library(ggplot2) # Für spätere Abbildungen
library(janitor) # Für Datenbereinigung und Tabellen
library(stringr) # Für die Arbeit mit Strings
library(here) # Für saubere Pfade
library(vtable) # Für Übersichtstabellen
```

# Einleitung

Dieses Dokument analysiert die Ausschreibungen und Anmeldungen der Sektionsanlässe des [SAC Bachtel](http://www.sac-bachtel.ch). Analysen sind möglich für die Jahre ab 2016, seit der Einführung von DropTours.

Dazu werden von DropTours die gesamten Ausschreibungen und Anmeldungen für jedes Jahr heruntergeladen und bearbeitet (entfernen überflüssiger Informationen, Bereinigung einiger Informationen) und zusammengefügt zu einem Datensatz. In @sec-datenvorbereitung wird der Datenaufbereteitungsprozess genauer beschrieben, in @sec-datenuebersicht die zur Verfügung stehenden Informationen. In @sec-analysen sind die Analysen zu finden.

## Datenvorbereitung {#sec-datenvorbereitung}

Bei der Vorbereitung der Daten wird wie folgt vorgegangen:

1.  Manuelles herunterladen der Excel der Anmeldungen und Ausschreibungen von [DropTours](http://www.sac-bachtel.ch/manager)

2.  Manuelles bearbeiten der Excel, da diese nicht sauber formatiert sind nach dem Herunterladen:

    -   Abspeichern im .xlsx-Format
    -   Umbenennen der "Aktivität" in "Aktivitaet"; diese Spalte muss einheitlich sein für das spätere Zusammenfügen von Anmeldungen und Ausschreibungen

3.  Einlesen der Daten der Anmeldungen und Ausschreibungen in das Statistikprogramm R

4.  Bearbeitung der Anmeldungen:

    -   Es werden nur das Geschlecht, PLZ & Ort der Teilnehmer:innen, Vegetarier, Kürzel, Geburtsjahr, Aktivität, Startdatum und Status behalten, der Rest wird gelöscht.

5.  Bearbeitung der Ausschreibungen:

    -   Es wird nur Aktivität, Startdatum, Tourtyp (lang und kurz), die technischen und konditionellen Anforderungen, sowie Name und Vorname des Tourenleiters behalten.

    -   Die Variable "Gruppen" wird vereinfacht, da viele Anlässe für mehrere Gruppen gleichzeitig ausgeschrieben sind. So wurden z.B. Ausschreibungen, welche für "Sektion\|Senioren\|Frauen" angeboten waren, zu den Ausschreibungen der Sektion dazugezählt. So verbleiben am Ende noch Ausschreibungen für die Frauengruppe, die Jugend, die Seniorengruppe und die Sektion.

6.  Die Datensätze aus Anmeldungen und Ausschreibungen können bei Bedarf zusammengefügt werden anhand der Informationen `Aktivitaet` (Name der Aktivität in DropTours), `Startdatum` und `Status`.

7.  Einige Variablen müssen neu werden gebildet, da sie nicht enthalten sind in den Originaldaten von DropTours:

    -   Alter (anhand Jahr des Anlasses und Geburtsdatum)
    -   Geschlecht (anhand der Anrede)

```{r Einlesen_Daten_Anmeldung_und_Ausschreibungen}
anm_2016 <- read_excel(here("Rohdaten", "Anmeldungen 2016.xlsx"))
anm_2017 <- read_excel(here("Rohdaten", "Anmeldungen 2017.xlsx"))
anm_2018 <- read_excel(here("Rohdaten", "Anmeldungen 2018.xlsx"))
anm_2019 <- read_excel(here("Rohdaten", "Anmeldungen 2019.xlsx"))
anm_2020 <- read_excel(here("Rohdaten", "Anmeldungen 2020.xlsx"))
anm_2021 <- read_excel(here("Rohdaten", "Anmeldungen 2021.xlsx"))
anm_2022 <- read_excel(here("Rohdaten", "Anmeldungen 2022.xlsx"))

auss_2016 <- read_excel(here("Rohdaten", "Ausschreibungen 2016.xlsx"))
auss_2017 <- read_excel(here("Rohdaten", "Ausschreibungen 2017.xlsx"))
auss_2018 <- read_excel(here("Rohdaten", "Ausschreibungen 2018.xlsx"))
auss_2019 <- read_excel(here("Rohdaten", "Ausschreibungen 2019.xlsx"))
auss_2020 <- read_excel(here("Rohdaten", "Ausschreibungen 2020.xlsx"))
auss_2021 <- read_excel(here("Rohdaten", "Ausschreibungen 2021.xlsx"))
auss_2022 <- read_excel(here("Rohdaten", "Ausschreibungen 2022.xlsx"))
auss_2023 <- read_excel(here("Rohdaten", "Ausschreibungen 2023.xlsx"))
```

```{r Anmeldungen_bearbeiten}
temp2016 <- c(
  "Anrede", "PLZ", "Ort", "Vegetarier", "Kuerzel",
  "Geburtsjahr", "Aktivitaet", "Startdatum", "Status"
)
anm_2016_klein <- anm_2016[temp2016]
remove(temp2016, anm_2016)

# 2017
temp2017 <- c(
  "Anrede", "PLZ", "Ort", "Vegetarier", "Kuerzel",
  "Geburtsjahr", "Aktivitaet", "Startdatum", "Status"
)
anm_2017_klein <- anm_2017[temp2017]
remove(temp2017, anm_2017)

# 2018
temp2018 <- c(
  "Anrede", "PLZ", "Ort", "Vegetarier", "Kuerzel",
  "Geburtsjahr", "Aktivitaet", "Startdatum", "Status"
)
anm_2018_klein <- anm_2018[temp2018]
remove(temp2018, anm_2018)

# 2019
temp2019 <- c(
  "Anrede", "PLZ", "Ort", "Vegetarier", "Kuerzel",
  "Geburtsjahr", "Aktivitaet", "Startdatum", "Status"
)
anm_2019_klein <- anm_2019[temp2019]
remove(temp2019, anm_2019)

# 2020
temp2020 <- c(
  "Anrede", "PLZ", "Ort", "Vegetarier", "Kuerzel",
  "Geburtsjahr", "Aktivitaet", "Startdatum", "Status"
)
anm_2020_klein <- anm_2020[temp2020]
remove(temp2020, anm_2020)

# 2021
temp2021 <- c(
  "Anrede", "PLZ", "Ort", "Vegetarier", "Kuerzel",
  "Geburtsjahr", "Aktivitaet", "Startdatum", "Status"
)
anm_2021_klein <- anm_2021[temp2021]
remove(temp2021, anm_2021)

# 2022
temp2022 <- c(
  "Anrede", "PLZ", "Ort", "Vegetarier", "Kuerzel",
  "Geburtsjahr", "Aktivitaet", "Startdatum", "Status"
)
anm_2022_klein <- anm_2022[temp2022]
remove(temp2022, anm_2022)
```

```{r create_anm_total}
# Alle Jahre kombinieren zu einem Datensatz mit oben ausgewählten Variablen
anm_total <- rbind(anm_2016_klein, 
                   anm_2017_klein, 
                   anm_2018_klein, 
                   anm_2019_klein, 
                   anm_2020_klein,
                   anm_2021_klein,
                   anm_2022_klein)
```

```{r anmeldungen_bereinigen}
# Fälle ausschliessen, wenn "Aktivität" = "Testtour Anmeldung" (Test-Anmeldungen)
anm_total <- anm_total[!anm_total$Aktivitaet == "Testtour Anmeldung", ]

# ** Neue Variablen bilden ----

# Variable für Jahr des Anlasses (Startdatum) definieren; als neue Spalte definieren!
anm_total$jahr <- as.numeric(format(anm_total$Startdatum, "%Y")) # Anmeldungen

# Alter der Teilnehmenden berechnen (nur anhand Geburtsjahr). ACHTUNG: Bei fehlendem Geburtsjahr ist Alter = jahr!
anm_total$alter <- anm_total$jahr - anm_total$Geburtsjahr

# Alter grösser als 199 mit NA ersetzen
anm_total$alter_korr <- replace(anm_total$alter, anm_total$alter > 199, NA)

# Anrede zu Geschlecht umformatieren
colnames(anm_total)[colnames(anm_total) == "Anrede"] <- "TN_geschlecht" # Spaltennamen ändern
anm_total$TN_geschlecht <- replace(anm_total$TN_geschlecht, anm_total$TN_geschlecht == "Herr", "männlich")
anm_total$TN_geschlecht <- replace(anm_total$TN_geschlecht, anm_total$TN_geschlecht == "Frau", "weiblich")

# Informationen der TN: Spaltennamen ändern

colnames(anm_total)[colnames(anm_total) == "PLZ"] <- "TN_PLZ"
colnames(anm_total)[colnames(anm_total) == "Ort"] <- "TN_Ort"
colnames(anm_total)[colnames(anm_total) == "Vegetarier"] <- "TN_Vegetarier"
colnames(anm_total)[colnames(anm_total) == "Kuerzel"] <- "TN_Kuerzel"
colnames(anm_total)[colnames(anm_total) == "Geburtsjahr"] <- "TN_Geburtsjahr"
colnames(anm_total)[colnames(anm_total) == "alter"] <- "TN_alter"
colnames(anm_total)[colnames(anm_total) == "alter_korr"] <- "TN_alter_korr"
```

```{r Ausschreibungen_bearbeiten}
# ** Zu behaltende Variablen definieren ----

# 2016

temp2016 <- c(
  "Aktivitaet", "Startdatum", "Gruppe", "Tourtyp", "Tourtyp lang", "Techn. Anforderungen",
  "Kond. Anforderungen", "Status"
)
auss_2016_klein <- auss_2016[temp2016]
remove(temp2016, auss_2016)

# 2017

temp2017 <- c(
  "Aktivitaet", "Startdatum", "Gruppe", "Tourtyp", "Tourtyp lang", "Techn. Anforderungen",
  "Kond. Anforderungen", "Status"
)
auss_2017_klein <- auss_2017[temp2017]
remove(temp2017, auss_2017)

# 2018

temp2018 <- c(
  "Aktivitaet", "Startdatum", "Gruppe", "Tourtyp", "Tourtyp lang", "Techn. Anforderungen",
  "Kond. Anforderungen", "Status"
)
auss_2018_klein <- auss_2018[temp2018]
remove(temp2018, auss_2018)

# 2019

temp2019 <- c(
  "Aktivitaet", "Startdatum", "Gruppe", "Tourtyp", "Tourtyp lang", "Techn. Anforderungen",
  "Kond. Anforderungen", "Status"
)
auss_2019_klein <- auss_2019[temp2019]
remove(temp2019, auss_2019)

# 2020

temp2020 <- c(
  "Aktivitaet", "Startdatum", "Gruppe", "Tourtyp", "Tourtyp lang", "Techn. Anforderungen",
  "Kond. Anforderungen", "Status"
)
auss_2020_klein <- auss_2020[temp2020]
remove(temp2020, auss_2020)

# 2021

temp2021 <- c(
  "Aktivitaet", "Startdatum", "Gruppe", "Tourtyp", "Tourtyp lang", "Techn. Anforderungen",
  "Kond. Anforderungen", "Status"
)
auss_2021_klein <- auss_2021[temp2021]
remove(temp2021, auss_2021)

# 2022

temp2022 <- c(
  "Aktivitaet", "Startdatum", "Gruppe", "Tourtyp", "Tourtyp lang", "Techn. Anforderungen",
  "Kond. Anforderungen", "Status"
)
auss_2022_klein <- auss_2022[temp2022]
remove(temp2022, auss_2022)

# 2023

temp2023 <- c(
  "Aktivitaet", "Startdatum", "Gruppe", "Tourtyp", "Tourtyp lang", "Techn. Anforderungen",
  "Kond. Anforderungen", "Status"
)
auss_2023_klein <- auss_2023[temp2023]
remove(temp2023, auss_2023)
```

```{r ausschreibungen_verbinden}
# Alle Jahre kombinieren zu einem Datensatz mit oben ausgewählten Variablen
auss_total <- rbind(
  auss_2016_klein, 
  auss_2017_klein, 
  auss_2018_klein, 
  auss_2019_klein,
  auss_2020_klein,
  auss_2021_klein,
  auss_2022_klein,
  auss_2023_klein
)
```

```{r ausschreibungen_bereinigen}
# Fälle ausschliessen, wenn "Aktivität" = "Testtour Anmeldung" (Test-Anmeldungen)
auss_total <- auss_total[!auss_total$Aktivitaet == "Testtour Anmeldung", ]

# Variable für Jahr des Anlasses (Startdatum) definieren; als neue Spalte definieren!
auss_total$jahr <- as.numeric(format(auss_total$Startdatum, "%Y")) # Ausschreibungen

# Status korrigieren (vor 2021: "/ausgebucht", ab 2021: "ausgebucht" [ohne slash])
auss_total$Status <- str_replace_all(auss_total$Status, '/', '')
```

```{r Gruppen_bereinigen}
auss_total$Gruppe <- str_replace_all(auss_total$Gruppe," ","")

auss_total$Gruppe <- str_replace(auss_total$Gruppe, "Alle", "Sektion")
auss_total$Gruppe <- str_replace(auss_total$Gruppe, "Sektion\\|Jugend\\|Senioren\\|Frauen", "Sektion")
auss_total$Gruppe <- str_replace(auss_total$Gruppe, "Sektion\\|Senioren\\|Frauen", "Sektion")
auss_total$Gruppe <- str_replace(auss_total$Gruppe, "Sektion\\|Jugend\\|Senioren", "Sektion")
auss_total$Gruppe <- str_replace(auss_total$Gruppe, "Sektion\\|Senioren", "Sektion")
auss_total$Gruppe <- str_replace(auss_total$Gruppe, "Sektion\\|Jugend", "Sektion")
auss_total$Gruppe <- str_replace(auss_total$Gruppe, "Sektion\\|Frauen", "Senioren")
auss_total$Gruppe <- str_replace(auss_total$Gruppe, "Senioren\\|Frauen", "Senioren")

```

```{r Datensätze Anmeldungen & Ausschreibungen zusammenfügen}
total <- left_join(anm_total, 
                   auss_total,
                   by = c("Aktivitaet" = "Aktivitaet", 
                          "Startdatum" = "Startdatum", 
                          "Status" = "Status",
                          "jahr" = "jahr"))
```

## Übersicht Informationen {#sec-datenuebersicht}

Nach der Bereinigung und Aufbereitung der Daten stehen die folgenden Informationen zur Verfügung (@tbl-ausschreibungen-infos für die Informationen aus den Ausschreibungen, @tbl-anmeldungen-infos für die Informationen aus den Anmeldungen):

| Name                      | Bemerkung                                                        |
|----------------------|--------------------------------------------------|
| Aktivität                 | Name der Aktivität / Tour / Ausschreibung                        |
| Startdatum                | Startdatum der Aktivität                                         |
| Gruppe                    | Für welche Gruppe wurde die Aktivität ausgeschrieben?            |
| Tourtyp                   | Tourtyp der Aktivität (S, HT, W etc.)                            |
| Tourtyp lang              | Tourtyp der Aktivität (Skitour, Hochtour, Wanderung etc.)        |
| Technische Anforderung    | Je nach Tourtyp unterschiedlich (WS-, ZS, T3 etc.)               |
| Konditionelle Anforderung | Auf der Skala von A (tiefe Anforderung) bis D (hohe Anforderung) |
| Status                    | Status der Aktivität (abgesagt, neues Datum, ausgebucht etc.)    |
| Jahr                      | In welchem Jahr wurde die Aktivität ausgeschrieben               |

: Übersicht Informationen aus Ausschreibungen {#tbl-ausschreibungen-infos}{tbl-colwidths="\[35,65\]"}

| Name        | Bemerkung                                                     |
|------------------|------------------------------------------------------|
| Geschlecht  | Geschlecht des / der TN                                       |
| Alter       | Alter des / der TN                                            |
| PLZ         | Postleitzahl des / der TN                                     |
| Ort         | Ort des / der TN                                              |
| Vegetarier  | Ist TN Vegetarier ja / nein                                   |
| Kürzel      | Mitgliedernummer / Kürzel des / der TN                        |
| Geburtsjahr | Geburtsjahr des / der TN                                      |
| Aktivität   | Name der Aktivität / Tour / Ausschreibung                     |
| Startdatum  | Startdatum der Aktivität                                      |
| Status      | Status der Aktivität (abgesagt, neues Datum, ausgebucht etc.) |
| Jahr        | In welchem Jahr wurde die Aktivität ausgeschrieben            |

: Übersicht Informationen aus Anmeldungen {#tbl-anmeldungen-infos}{tbl-colwidths="\[35,65\]"}

::: callout-warning
## Einschränkungen

Bei den nachfolgenden Analysen gibt es einige Einschränkungen zu beachten: DropTours wird nicht benutzt, um Daten zu sammeln für eine strukturierte Analyse, sondern zur Verwaltung von Touren. Entsprechend gibt es einige Schwachstellen in den Daten, die Daten werden in DropTours nicht immer sauber gepflegt. Bspw. ist die Analyse des Tourenstatus (@sec-tourenstatus) sehr vorsichtig zu interpretieren, da kaum immer alle Tourenleiter:innen den Status ihrer Touren immer konsequent ändern, wenn eine Tour voll ist ("ausgebucht"), auf ein neues Datum verschoben werden musste ("neues Datum") oder ganz abgesagt werden musste ("abgesagt"). Ebenso kommt es ab und zu vor, dass sich Tourenleiter:innen auf den eigenen Touren selbst als Teilnehmende eintragen, was wiederum die Anzahl Anmeldungen verfälscht. Diese Analysen sollten also besser als grobe Richtwerte gesehen werden!
:::

# Analysen {#sec-analysen}

## Analyse der Anmeldungen

Nachfolgend einige Analysen zu den Anmeldungen. Dabei wird die Geschlechter- und Altersverteilung der angemeldeten Teilnehmer:innen betrachtet, sowie die Anzahl Teilnehmer:innen pro Aktivität. In @fig-anmeldungen-jahr sind die Anzahl Anmeldungen pro Jahr ersichtlich, wobei sich relativ klar der Rückgang der Anmeldungen im Corona-Jahr 2020 zeigt, gefolgt von einem Anstieg.

```{r Anmeldungen_Jahr}
#| label: fig-anmeldungen-jahr
#| fig-cap: "Total Anmeldungen nach Jahr"


anm_total %>%
  ggplot(aes(x = jahr)) +
  geom_bar(stat = "count", fill = "grey") +
  labs(
    x = "Jahr",
    y = "Anzahl Anmeldungen"
  ) +
  theme_minimal() +
  scale_y_continuous(breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500)) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```

### Geschlecht

In  @fig-anmeldungen-jahr-geschlecht sind die Anmeldungen nach Geschlecht getrennt. 

```{r Anmeldungen_Jahr_Geschlecht}
#| label: fig-anmeldungen-jahr-geschlecht
#| fig-cap: "Total Anmeldungen nach Jahr und Geschlecht"


anm_total %>%
  ggplot(aes(x = jahr, fill = TN_geschlecht)) +
  geom_bar(stat = "count") +
  labs(
    x = "Jahr",
    y = "Anzahl Anmeldungen",
    fill = "Geschlecht"
  ) +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  scale_y_continuous(breaks = c(0, 500, 1000, 1500, 2000, 2500, 3000, 3500)) +
  stat_count(
    geom = "text", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```

### Alter

Nachfolgend werden die Durchschnittsalter der Teilnehmenden nach Jahr (beide Geschlechter zusammen) und nach Geschlecht (alle Jahre zusammen) gezeigt. Es ist ersichtlich, dass einerseits das Durchschnittsalter der Teilnehmenden lange gesunken ist und jetzt wieder anzusteigen scheint (@tbl-durchschnittsalter) und die Teilnehmerinnen im Durchschnitt jünger sind als die Teilnehmer (@tbl-durchschnittsalter-geschlecht). Der Tiefpunkt beim Durchschnittsalter im Jahr 202 könnte jedoch auch auf die Corona-Pandemie zuruckzuführen sein, wobei sich die älteren Teilnehmer:innen noch zurückhaltender verhielten und sich weniger auf Touren anmeldeten.

```{r}
#| label: tbl-durchschnittsalter
#| tbl-cap: "Durchschnittsalter (Mittelwert) der Anmeldungen pro Jahr"

knitr::kable(anm_total %>%
               group_by(jahr) %>%
               summarize(mw_alter = mean(TN_alter_korr,
                                         na.rm = TRUE)),
             col.names = c("Jahr", "Durchschnittsalter (Mittelwert)"),
             align = "lc",
             digits = 1)
```

```{r}
#| label: tbl-durchschnittsalter-median
#| tbl-cap: "Durchschnittsalter (Median) der Anmeldungen pro Jahr"
#| include: FALSE

knitr::kable(anm_total %>%
               group_by(jahr) %>%
               summarize(med_alter = median(TN_alter_korr,
                                         na.rm = TRUE)),
             col.names = c("Jahr", "Durchschnittsalter (Median)"),
             align = "lc",
             digits = 1)
```

```{r}
#| label: tbl-durchschnittsalter-geschlecht
#| tbl-cap: "Durchschnittsalter (Mittelwert) aller Anmeldungen nach Geschlecht"


knitr::kable(anm_total %>%
               group_by(TN_geschlecht) %>%
               summarize(mw_alter = mean(TN_alter_korr, 
                                         na.rm = TRUE)),
             col.names = c("Geschlecht", "Durchschnittsalter (Mittelwert)"),
             align = "lc",
             digits = 1)
```

```{r}
#| label: tbl-durchschnittsalter-geschlecht-median
#| tbl-cap: "Durchschnittsalter (Median) aller Anmeldungen nach Geschlecht"
#| include: FALSE


knitr::kable(anm_total %>%
               group_by(TN_geschlecht) %>%
               summarize(med_alter = median(TN_alter_korr, 
                                            na.rm = TRUE)),
             col.names = c("Geschlecht", "Durchschnittsalter (Median)"),
             align = "lc",
             digits = 1)
```

<!-- Die Altersbreite in der Sektion ist offensichtlich sehr gross; wenn man nur die Anmeldungen auf Sektionstouren anschaut, liegt das Durchschnittsalter offensichtlich tiefer (@tbl-durchschnittsalter-geschlecht-sektion und @tbl-durchschnittsalter-geschlecht-median-sektion). -->

```{r}
#| label: tbl-durchschnittsalter-geschlecht-sektion
#| tbl-cap: "Durchschnittsalter (Mittelwert) aller Anmeldungen nach Geschlecht (nur Sektion)"
#| include: FALSE


knitr::kable(total %>%
               filter(Gruppe == "Sektion") |> 
               group_by(TN_geschlecht) %>%
               summarize(mw_alter = mean(TN_alter_korr, 
                                         na.rm = TRUE)),
             col.names = c("Geschlecht", "Durchschnittsalter (Mittelwert)"),
             align = "lc",
             digits = 1)
```

```{r}
#| label: tbl-durchschnittsalter-geschlecht-median-sektion
#| tbl-cap: "Durchschnittsalter (Median) aller Anmeldungen nach Geschlecht (nur Sektion)"
#| include: FALSE


knitr::kable(total %>%
               filter(Gruppe == "Sektion") |> 
               group_by(TN_geschlecht) %>%
               summarize(med_alter = median(TN_alter_korr, 
                                            na.rm = TRUE)),
             col.names = c("Geschlecht", "Durchschnittsalter (Median)"),
             align = "lc",
             digits = 1)
```

<!-- Das unterschiedliche Alter zwischen Männer und Frauen lässt sich auch in einer Abbildung visualisieren: @fig-altersverteilung-geschlecht zeigt die Altersverteilung der Anmeldungen nach Geschlecht als Baumdiagramm, wobei breitere Stellen auf mehr Personen in diesem Alter hinweisen, schmälere auf weniger Personen. Dabei wird ersichtlich, dass: -->

<!-- -   Die Männer tendenziell länger an Sektionsanlässen teilnehmen (Spitze weiter oben) -->
<!-- -   Frauen eher ein tieferes Durchschnittsalter aufweisen (breiteste Stelle ist weiter unten) -->
<!-- -   Bei beiden Geschlechtern eine Häufung an Aktivitäten auftreten ca. im 55 Altersjahr, gefolgt von einem Rückgang ("Taille" ca. bei 60 Jahren), gefolgt von einem neuerlichen Anstieg nach der Pensionierung -->
<!-- -   Sowohl bei den Männern als auch bei den Frauen sind die meisten Teilnehmer:innen zwischen 65 und 75 Jahre alt sind -->

```{r altersverteilung_geschlecht}
#| label: fig-altersverteilung-geschlecht
#| fig-cap: "Altersverteilung der Anmeldungen nach Geschlecht getrennt"
#| include: FALSE


anm_total %>%
  ggplot(aes(
    x = TN_geschlecht,
    y = TN_alter_korr
  )) +
  geom_dotplot(
    binaxis = "y",
    stackdir = "center",
    binwidth = 0.2
  ) +
  theme_minimal() +
  labs(
    x = "Geschlecht",
    y = "Alter der Anmeldungen"
  ) +
  scale_y_continuous(breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
```

<!-- In Abbildung @fig-altersverteilung-geschlecht-jahr ist das Alter der angemeldeten Teilnehmer::innen zudem pro Jahr ersichtlich, links die Männer und rechts die Frauen. Der in @tbl-durchschnittsalter festgestellte Rückgang des Durchschnittsalter lässt sich so jedoch kaum visualisieren. -->

```{r altersverteilung_jahr_geschlecht}
#| label: fig-altersverteilung-geschlecht-jahr
#| fig-cap: "Altersverteilung der Anmeldungen nach Jahr und Geschlecht getrennt"
#| include: FALSE

anm_total %>%
  ggplot(aes(
    x = factor(jahr),
    y = TN_alter_korr, na.rm = TRUE
  )) +
  geom_dotplot(
    binaxis = "y",
    stackdir = "center",
    binwidth = 0.1
  ) +
  theme_minimal() +
  labs(
    x = "Jahr",
    y = "Alter der Anmeldungen",
    fill = "Geschlecht"
  ) +
  facet_grid(. ~ TN_geschlecht) +
  scale_y_continuous(breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
```

```{r alter_jahr}
#| label: fig-altersverteilung-geschlecht-jahr-getrennt
#| fig-cap: "Altersverteilung der Anmeldungen nach Jahr und Geschlecht"
#| include: FALSE

anm_total %>%
  ggplot(aes(
    x = as.factor(jahr),
    y = TN_alter_korr,
    fill = TN_geschlecht)) +
  geom_dotplot(
    binaxis = "y",
    stackdir = "center",
    binwidth = 0.2
  ) +
  theme_minimal() +
  labs(
    x = "Jahr",
    y = "Alter der Anmeldungen",
    fill = "Geschlecht"
  ) +
  scale_y_continuous(breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
```

### Anzahl Teilnehmer:innen pro Tour

#### Anzahl Anmeldungen allgemein

In @fig-anmeldungen_total-pro-woche sind die Anzahl Anmeldungen pro *Kalenderwoche* für die Jahre 2016 bis 2022 ersichtlich. Man sieht klar, dass in den ca. ersten 10 Kalenderwochen am meisten Anmeldungen auf Anlässe der Sektion eingehen, bevor die Anzahl absinkt auf den Frühling hin, dann auf den Sommer nochmals leicht ansteigt. Gegen Ende Jahr gibt es sogar eine Phase ohne Anmeldungen (KW 47, Ende November, wo vielleicht gar keine Touren ausgeschrieben werden?).

```{r}
#| label: fig-anmeldungen_total-pro-woche
#| fig-cap: "Verlauf der Anmeldungen pro Kalenderwoche für die Jahre 2016-2022"

anm_total <- anm_total |> 
  mutate(woche = lubridate::week(Startdatum))


anm_total %>%
  group_by(woche) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = woche, y = count)) + 
  geom_line() + 
  theme_minimal() +
  labs(
    x = "Kalenderwoche", 
    y = "Anzahl Anmeldungen"
  ) +
  geom_smooth()
```

<!-- In @fig-anmeldungen_total-pro-woche-alle-jahre sind die Anzahl Anmeldungen pro Woche für alle Wochen von Anfang 2016 bis Ende 2022 ersichtlich. Auch hier ist der Rückgang der Anmeldungen im Frühling 2020 klar ersichtlich. -->

```{r}
# Erster Wochentag pro Startdatum bestimmen (ungefähr als Proxy für Woche)
anm_total <- anm_total |> 
  mutate(woche_kont = as.Date(lubridate::floor_date(Startdatum, unit = "week")))
```

```{r}
#| label: fig-anmeldungen_total-pro-woche-alle-jahre
#| fig-cap: "Verlauf der Anmeldungen pro Woche für die Jahre 2016-2022"
#| include: FALSE

ggplot(anm_total) +
  aes(x = woche_kont) +
  geom_bar(fill = "grey") +
  theme_minimal() +
  scale_x_date(date_breaks = "3 months") +
  labs(
    x = "Wochenstart", 
    y = "Anzahl Anmeldungen pro Woche"
  ) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

#### Anmeldungen im Corona-Jahr 2020

In Abbildung @fig-anmeldungen_2019-2022 sind die Anmeldungen pro Kalenderwoche für die Jahre 2019 bis 2022 ersichtlich. Klar zu sehen ist der starke Rückgang an Anmeldungen ab ca. Mitte März (Lockdown) im Jahr 2020, gefolgt von einem Anstieg der Sommertouren und dem neuerlichen Rückgang ab ca. Mitte Oktober. Im Vergleich sind die Anmeldezahlen der anderen Jahre um einiges stabiler im Jahresverlauf (mit Ausnahme des Jahres 2022, welches in den ersten Kalenderwochen sehr viele Anmeldungen verzeichnete).

```{r}
#| label: fig-anmeldungen_2020
#| fig-cap: "Verlauf der Anmeldungen im Jahr 2020 (Anzahl Anmeldungen pro Woche; alle Anlässe der Sektion)"
#| include: FALSE


anm_total <- anm_total |> 
  mutate(woche = lubridate::week(Startdatum))

anm_total %>%
  filter(Startdatum >= as.POSIXct("2020-01-01") & Startdatum <= as.POSIXct("2020-12-31")) %>%
  group_by(woche) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = woche, y = count)) + 
  geom_line() + 
  theme_minimal() +
  scale_y_continuous(limits = c(0, 150)) +
  # scale_x_date(date_breaks = "1 year",
  #              date_labels = "%d %b %y") +
  labs(
    x = "Kalenderwoche", 
    y = "Anzahl Anmeldungen"
  ) +
  geom_smooth()
```

```{r}
#| label: fig-anmeldungen_2019
#| fig-cap: "Verlauf der Anmeldungen im Jahr 2019 (Anzahl Anmeldungen pro Woche; alle Anlässe der Sektion)"
#| include: FALSE


anm_total <- anm_total |> 
  mutate(woche = lubridate::week(Startdatum))

anm_total %>%
  filter(Startdatum >= as.POSIXct("2019-01-01") & Startdatum <= as.POSIXct("2019-12-31")) %>%
  group_by(woche) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = woche, y = count)) + 
  geom_line() + 
  theme_minimal() +
  scale_y_continuous(limits = c(0, 150)) +
  # scale_x_date(date_breaks = "1 year",
  #              date_labels = "%d %b %y") +
  labs(
    x = "Kalenderwoche", 
    y = "Anzahl Anmeldungen"
  ) +
  geom_smooth()
```

```{r}
#| label: fig-anmeldungen_2021
#| fig-cap: "Verlauf der Anmeldungen im Jahr 2021 (Anzahl Anmeldungen pro Woche; alle Anlässe der Sektion)"
#| include: FALSE


anm_total <- anm_total |> 
  mutate(woche = lubridate::week(Startdatum))

anm_total %>%
  filter(Startdatum >= as.POSIXct("2021-01-01") & Startdatum <= as.POSIXct("2021-12-31")) %>%
  group_by(woche) %>%
  summarise(count = n()) %>%
  ggplot(aes(x = woche, y = count)) + 
  geom_line() + 
  theme_minimal() +
  scale_y_continuous(limits = c(0, 150)) +
  # scale_x_date(date_breaks = "1 year",
  #              date_labels = "%d %b %y") +
  labs(
    x = "Kalenderwoche", 
    y = "Anzahl Anmeldungen"
  ) +
  geom_smooth()
```

```{r}
#| label: fig-anmeldungen_2019-2022 
#| fig-cap: "Verlauf der Anmeldungen in den Jahren 2019 bis 2022 (Anzahl Anmeldungen pro Woche; alle Anlässe der Sektion)"


anm_total <- anm_total |> 
  mutate(woche = lubridate::week(Startdatum)) |> 
  mutate(jahr = lubridate::year(Startdatum))

anm_total %>%
  filter(Startdatum >= as.POSIXct("2019-01-01") & Startdatum <= as.POSIXct("2022-12-31")) %>%
  group_by(woche, jahr) %>%
  summarise(count = n()) |> 
  ggplot(aes(x = woche, y = count)) + 
  geom_line() + 
  theme_minimal() +
  # scale_y_continuous(limits = c(0, 150)) +
  # scale_x_date(date_breaks = "1 year",
  #              date_labels = "%d %b %y") +
  labs(
    x = "Kalenderwoche", 
    y = "Anzahl Anmeldungen") +
  # geom_smooth() +
  facet_wrap(~jahr)
```


## Analyse der Ausschreibungen

### Anzahl Ausschreibungen pro Jahr

In @fig-ausschreibungen-pro-jahr ist die Anzahl *aller Ausschreibungen im Droptours* nach Jahr ersichtlich für die Jahre 2016 bis 2023. Es zeigt sich dabei, dass die Anzahl über die letzten Jahren stabil geblieben ist und ungefähr zwischen 400 und 440 Ausschreibungen schwankt. 

```{r ausschreibungen_jahr}
#| label: fig-ausschreibungen-pro-jahr
#| fig-cap: "Anzahl Ausschreibungen pro Jahr (total Ausschreibungen)"


auss_total %>%
  ggplot(aes(x = jahr)) +
  geom_bar(stat = "count", fill = "grey") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen"
  ) +
  theme_minimal() +
  scale_y_continuous(breaks = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450)) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", 
    size = 3.5,
    aes(label = ..count..), 
    position = position_stack(vjust = 0.5)
  )
```

```{r ausschreibungen_jahr_sektion}
#| label: fig-ausschreibungen-pro-jahr-sektion
#| fig-cap: "Anzahl Ausschreibungen pro Jahr (nur Sektion)"
#| include: FALSE


auss_total %>%
  filter(Gruppe == "Sektion") |> 
  ggplot(aes(x = jahr)) +
  geom_bar(stat = "count", fill = "grey") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen"
  ) +
  theme_minimal() +
  # scale_y_continuous(breaks = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450)) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```

```{r ausschreibungen_jahr_senioren}
#| label: fig-ausschreibungen-pro-jahr-senioren
#| fig-cap: "Anzahl Ausschreibungen pro Jahr (nur Senioren)"
#| include: FALSE

auss_total %>%
  filter(Gruppe == "Senioren") |> 
  ggplot(aes(x = jahr)) +
  geom_bar(stat = "count", fill = "grey") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen"
  ) +
  theme_minimal() +
  # scale_y_continuous(breaks = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450)) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```

```{r ausschreibungen_jahr_jugend}
#| label: fig-ausschreibungen-pro-jahr-jugend
#| fig-cap: "Anzahl Ausschreibungen pro Jahr (nur Jugend)"
#| include: FALSE


auss_total %>%
  filter(Gruppe == "Jugend") |> 
  ggplot(aes(x = jahr)) +
  geom_bar(stat = "count", fill = "grey") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen"
  ) +
  theme_minimal() +
  # scale_y_continuous(breaks = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450)) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```

### Ausschreibungen nach Gruppe

@fig-ausschreibungen-pro-jahr-nach-gruppe zeigt die Anzahl Ausschreibungen nach Gruppe, wobei sich die Auflösung der Frauengruppe auf das Jahr 2022 zeigt.

```{r gruppe}
#| label: fig-ausschreibungen-pro-jahr-nach-gruppe
#| fig-cap: "Ausgeschriebene Touren pro Gruppe nach Jahr"


auss_total %>%
  # filter(Gruppe %in% c("Sektion", "Senioren", "Jugend")) %>%
  ggplot(aes(x = jahr, fill = factor(Gruppe)),
    position = position_dodge(preserve = "single")
  ) +
  geom_bar(stat = "count") +
  scale_fill_brewer(palette = "Set1") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen",
    fill = "Gruppe"
  ) +
  theme_minimal() +
  scale_y_continuous(breaks = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450)) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", colour = "white", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```


### Analyse der ausgeschriebenen Tourtypen der Sektion
In @fig-ausschreibungen-pro-jahr-tourtyp-alle ist die Anzahl ausgeschriebener Anlässe der Sektion (ohne Seniorengruppe und JO) pro Jahr für die Jahre 2016 bis 2023 ersichtlich, wobei sich ein leichter Anstieg zeigt. Zu beachten ist, dass im Jahr 2023 noch ein paar wenige Zusatztouren hinzukommen könnten.

```{r}
#| label: fig-ausschreibungen-pro-jahr-tourtyp-alle
#| fig-cap: "Anzahl Ausschreibungen der Sektion nach Jahr"


auss_total %>%
  filter(Gruppe == "Sektion") |> 
  ggplot(aes(x = jahr),
    position = position_dodge(preserve = "single")
  ) +
  geom_bar(stat = "count", fill = "grey") +
  # scale_fill_brewer(palette = "Set1") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen",
    fill = "Tourtyp"
  ) +
  theme_minimal() +
  ylim(c(0, 250)) +
  # scale_y_continuous(breaks = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450)) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```


<!-- Untersucht man die Anzahl Ausschreibungen differenzierter nach Tourtyp, zeigen sich doch die einen oder anderen Schwankungen. So ist z. B. die Anzahl ausgeschriebener Wanderungen seit 2019 stetig zurückgagangen, von `r count(auss_total %>% filter(jahr == 2019) %>% filter(Tourtyp == "W"))` über `r count(auss_total %>% filter(jahr == 2020) %>% filter(Tourtyp == "W"))` auf `r count(auss_total %>% filter(jahr == 2021) %>% filter(Tourtyp == "W"))`. Noch klarer zeigt sich das in @fig-ausschreibungen-pro-jahr-tourtyp-nur-wandern-sektion, wo nur die Touren des Ressorts Wandern abgebildet sind. -->

In Abbildung @fig-ausschreibungen-pro-jahr-tourtyp sind die Ausschreibungen der Sektion nach Tourtyp und Jahr ersichtlich, wobei nur die folgenden Tourtyoen berücksichtigt wurden:

-   Hochtouren
-   Klettertouren
-   Schneeschuhtouren
-   Skitouren
-   Veranstaltungen
-   Wanderungen

```{r tourtypen_jahr}
#| label: fig-ausschreibungen-pro-jahr-tourtyp
#| fig-cap: "Anzahl Ausschreibungen der Sektion nach Tourtyp und Jahr"


auss_total %>%
  filter(Gruppe == "Sektion") |> 
  filter(Tourtyp %in% c("H", "W", "S", "SS", "V", "K")) %>%
  # filter(Gruppe %in% "Sektion") |> 
  ggplot(aes(x = jahr, fill = factor(`Tourtyp lang`)),
    position = position_dodge(preserve = "single")
  ) +
  geom_bar(stat = "count") +
  scale_fill_brewer(palette = "Set1") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen",
    fill = "Tourtyp"
  ) +
  theme_minimal() +
  ylim(c(0, 250)) +
  # scale_y_continuous(breaks = c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450)) +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```

<!-- In @fig-ausschreibungen-pro-jahr-tourtyp-nur-wandern-sektion ist die Anzahl Ausschreibungen der Wanderungen, Berg- und Schneeschuhtouren der Sektion ersichtlich. Es wird dabei klar, dass die Anzahl der ausgeschriebenen Wanderungen und Schneeschuhtouren von 2020 auf 2021 relativ stark zurückgegangen ist[^1]. @fig-ausschreibungen-pro-jahr-tourtyp-senioren zeigt umgekehrt die Ausschreibungen der Seniorengruppe. -->

<!-- [^1]: Zu bedenken ist, dass hier die Zusatztouren noch nicht ins Gewicht fallen, die evtl. im Laufe des Jahres noch dazukommen. Die Bilanz könnte sich also noch etwas verbessern -->

```{r tourtypen_jahr_w_sek}
#| label: fig-ausschreibungen-pro-jahr-tourtyp-nur-wandern-sektion
#| fig-cap: "Anzahl Ausschreibungen nach Tourtyp und Jahr, nur Wandern, Bergtouren \\& Schneeschuhe, nur Anlässe der Sektion (ohne Senioren)"
#| include: FALSE


auss_total %>%
  filter(Tourtyp %in% c("BT", "W", "SS")) %>%
  filter(Gruppe %in% c("Sektion")) %>%
  ggplot(aes(x = jahr, fill = factor(`Tourtyp lang`)),
    position = position_dodge(preserve = "single")
  ) +
  geom_bar(stat = "count") +
  scale_fill_brewer(palette = "Set1") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen",
    fill = "Tourtyp"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", colour = "white", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```

```{r tourtypen_jahr_w_sen}
#| label: fig-ausschreibungen-pro-jahr-tourtyp-senioren
#| fig-cap: "Anzahl Ausschreibungen nach Tourtyp und Jahr, nur Wandern, Bergtouren \\& Schneeschuhe, nur Anlässe der Senioren (ohne Sektion)"
#| include: FALSE


auss_total %>%
  filter(Tourtyp %in% c("BT", "W", "SS")) %>%
  filter(Gruppe %in% c("Senioren")) %>%
  ggplot(aes(x = jahr, fill = factor(`Tourtyp lang`)),
    position = position_dodge(preserve = "single")
  ) +
  geom_bar(stat = "count") +
  scale_fill_brewer(palette = "Set1") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen",
    fill = "Tourtyp"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", colour = "white", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```

### Status der Touren {#sec-tourenstatus}

In @fig-ausschreibungen-tourenstatus ist der Tourenstatus der ausgeschriebenen Touren pro Jahr ersichtlich, wobei wiederum für das Corona-Jahr 2020 der hohe Anteil "abgesagt" ersichtlich ist. Der eher höhere Anteil der abgesagten Touren im Jahr 2022 dürfte primäer auf Sommertouren und auf die schlechten Schneeverhältnisse auf Gletschern zurückzuführen sein. Auf die Darstellung des Jahres 2023 wurde hier verzichtet, da sich dies noch ändern kann.

```{r status}
#| label: fig-ausschreibungen-tourenstatus
#| fig-cap: "Status der ausgeschriebenen Touren nach Jahr, nur Anlässe der Sektion (ohne Senioren oder JO)"

# NA zu anderem label ändern
auss_total <- auss_total |>
  mutate(Status = ifelse(is.na(Status), "durchgeführt (keine Änderung)", Status))

auss_total %>%
  filter(jahr != 2023) |> 
  filter(Gruppe %in% c("Sektion")) %>%
  ggplot(aes(x = jahr, 
             fill = factor(Status))) +
  geom_bar(stat = "count") +
  scale_fill_brewer(palette = "Set1") +
  labs(
    x = "Jahr",
    y = "Anzahl Ausschreibungen",
    fill = "Status"
  ) +
  theme_minimal() +
  # scale_y_continuous(breaks=c(0, 10, 100, 150, 200, 250, 300, 350, 400, 450))  +
  scale_x_continuous(breaks = c(2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)) +
  stat_count(
    geom = "text", colour = "white", size = 3.5,
    aes(label = ..count..), position = position_stack(vjust = 0.5)
  )
```
